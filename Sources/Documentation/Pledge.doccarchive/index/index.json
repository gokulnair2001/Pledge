{"includedArchiveIdentifiers":["pledge.Pledge"],"interfaceLanguages":{"swift":[{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/pledge\/plglobalstore\/array(for:defaultvalue:)","title":"func array(for: String, defaultValue: [Any]) -> PLObservable<[Any]>","type":"method"},{"path":"\/documentation\/pledge\/plglobalstore\/boolean(for:defaultvalue:)","title":"func boolean(for: String, defaultValue: Bool) -> PLObservable<Bool>","type":"method"},{"path":"\/documentation\/pledge\/plglobalstore\/dictionary(for:defaultvalue:)","title":"func dictionary(for: String, defaultValue: [String : Any]) -> PLObservable<[String : Any]>","type":"method"},{"path":"\/documentation\/pledge\/plglobalstore\/integer(for:defaultvalue:)","title":"func integer(for: String, defaultValue: Int) -> PLObservable<Int>","type":"method"},{"path":"\/documentation\/pledge\/plglobalstore\/observable(for:defaultvalue:)","title":"func observable<T>(for: String, defaultValue: T) -> PLObservable<T>","type":"method"},{"path":"\/documentation\/pledge\/plglobalstore\/removeallobservables()","title":"func removeAllObservables()","type":"method"},{"path":"\/documentation\/pledge\/plglobalstore\/removeobservable(for:)","title":"func removeObservable(for: String)","type":"method"},{"path":"\/documentation\/pledge\/plglobalstore\/string(for:defaultvalue:)","title":"func string(for: String, defaultValue: String) -> PLObservable<String>","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/pledge\/plglobalstore\/shared","title":"static let shared: PLGlobalStore","type":"property"}],"path":"\/documentation\/pledge\/plglobalstore","title":"PLGlobalStore","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/pledge\/plobservable\/init(_:)","title":"init(T)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/pledge\/plobservable\/beginupdates()","title":"func beginUpdates()","type":"method"},{"path":"\/documentation\/pledge\/plobservable\/compactmap()","title":"func compactMap<U>() -> PLObservable<U>","type":"method"},{"path":"\/documentation\/pledge\/plobservable\/debounce(for:)","title":"func debounce(for: TimeInterval) -> Self","type":"method"},{"path":"\/documentation\/pledge\/plobservable\/deliver(on:)","title":"func deliver(on: DispatchQueue) -> Self","type":"method"},{"path":"\/documentation\/pledge\/plobservable\/deliveronmain()","title":"func deliverOnMain() -> Self","type":"method"},{"path":"\/documentation\/pledge\/plobservable\/distinctuntilchanged()","title":"func distinctUntilChanged() -> PLObservable<T>","type":"method"},{"path":"\/documentation\/pledge\/plobservable\/distinctuntilchanged(by:)","title":"func distinctUntilChanged(by: (T, T) -> Bool) -> PLObservable<T>","type":"method"},{"path":"\/documentation\/pledge\/plobservable\/endupdates()","title":"func endUpdates()","type":"method"},{"path":"\/documentation\/pledge\/plobservable\/filter(_:)","title":"func filter((T) -> Bool) -> PLObservable<T>","type":"method"},{"path":"\/documentation\/pledge\/plobservable\/flatmap(_:)","title":"func flatMap<U>((T) -> PLObservable<U>) -> PLObservable<U>","type":"method"},{"path":"\/documentation\/pledge\/plobservable\/flatmapsuccess(_:)","title":"func flatMapSuccess<U>((Any) -> PLObservable<Result<U, Error>>) -> PLObservable<Result<U, Error>>","type":"method"},{"path":"\/documentation\/pledge\/plobservable\/map(_:)","title":"func map<U>((T) -> U) -> PLObservable<U>","type":"method"},{"path":"\/documentation\/pledge\/plobservable\/maperror(_:)","title":"func mapError<E>((Error) -> E) -> PLObservable<Result<Any, E>>","type":"method"},{"path":"\/documentation\/pledge\/plobservable\/mapsuccess(_:)","title":"func mapSuccess<U>((Any) -> U) -> PLObservable<Result<U, Error>>","type":"method"},{"path":"\/documentation\/pledge\/plobservable\/merge(_:)","title":"func merge(PLObservable<T>) -> PLObservable<T>","type":"method"},{"path":"\/documentation\/pledge\/plobservable\/notifyobservers()","title":"func notifyObservers()","type":"method"},{"path":"\/documentation\/pledge\/plobservable\/removeallsubscribers()","title":"func removeAllSubscribers()","type":"method"},{"path":"\/documentation\/pledge\/plobservable\/setvalue(_:notify:)","title":"func setValue(T, notify: Bool)","type":"method"},{"path":"\/documentation\/pledge\/plobservable\/skip(_:)","title":"func skip(Int) -> PLObservable<T>","type":"method"},{"path":"\/documentation\/pledge\/plobservable\/subscribe(_:)","title":"func subscribe((T) -> Void) -> UUID","type":"method"},{"path":"\/documentation\/pledge\/plobservable\/throttle(for:)","title":"func throttle(for: TimeInterval) -> Self","type":"method"},{"path":"\/documentation\/pledge\/plobservable\/unsubscribe(_:)","title":"func unsubscribe(UUID)","type":"method"},{"path":"\/documentation\/pledge\/plobservable\/withpriority(_:)","title":"func withPriority(PLObserverPriority) -> Self","type":"method"},{"path":"\/documentation\/pledge\/plobservable\/zip(_:)","title":"func zip<U>(PLObservable<U>) -> PLObservable<(T, U)>","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/pledge\/plobservable\/failure(_:)","title":"static func failure<U, E>(E) -> PLObservable<Result<U, E>>","type":"method"},{"path":"\/documentation\/pledge\/plobservable\/success(_:)","title":"static func success<U, E>(U) -> PLObservable<Result<U, E>>","type":"method"}],"path":"\/documentation\/pledge\/plobservable","title":"PLObservable","type":"class"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/pledge\/plobserverpriority\/_(_:_:)-46jhm","title":"static func < (PLObserverPriority, PLObserverPriority) -> Bool","type":"op"},{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/pledge\/plobserverpriority\/high","title":"case high","type":"case"},{"path":"\/documentation\/pledge\/plobserverpriority\/low","title":"case low","type":"case"},{"path":"\/documentation\/pledge\/plobserverpriority\/normal","title":"case normal","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/pledge\/plobserverpriority\/init(rawvalue:)","title":"init?(rawValue: Int)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/pledge\/plobserverpriority\/'...(_:)-166kf","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/pledge\/plobserverpriority\/'...(_:)-3ah19","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/pledge\/plobserverpriority\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/pledge\/plobserverpriority\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/pledge\/plobserverpriority\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/pledge\/plobserverpriority\/_(_:_:)-1vtfn","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/pledge\/plobserverpriority\/_=(_:_:)-10fk2","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/pledge\/plobserverpriority\/_=(_:_:)-5l4ju","title":"static func >= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/pledge\/plobserverpriority\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/pledge\/plobserverpriority\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/pledge\/plobserverpriority\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/pledge\/plobserverpriority\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/pledge\/plobserverpriority\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/pledge\/plobserverpriority\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/pledge\/plobserverpriority","title":"PLObserverPriority","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/pledge\/plratelimitingtype\/debounce(_:)","title":"case debounce(TimeInterval)","type":"case"},{"path":"\/documentation\/pledge\/plratelimitingtype\/none","title":"case none","type":"case"},{"path":"\/documentation\/pledge\/plratelimitingtype\/throttle(_:)","title":"case throttle(TimeInterval)","type":"case"}],"path":"\/documentation\/pledge\/plratelimitingtype","title":"PLRateLimitingType","type":"enum"}],"path":"\/documentation\/pledge","title":"Pledge","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":2}}